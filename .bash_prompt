#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

if tput setaf 1 &> /dev/null; then
	bold=$(tput bold);
	reset=$(tput sgr0);
	black=$(tput setaf 0);
	white=$(tput setaf 15);
	purple=$(tput setaf 125);
	# Solarized colors, taken from https://ethanschoonover.com/solarized/
	base03=$(tput setaf 234);
	base02=$(tput setaf 235);
	base01=$(tput setaf 240);
	base00=$(tput setaf 241);
	base0=$(tput setaf 244);
	base1=$(tput setaf 245);
	base2=$(tput setaf 254);
	base3=$(tput setaf 230);
	yellow=$(tput setaf 136);
	orange=$(tput setaf 166);
	red=$(tput setaf 160);
	magenta=$(tput setaf 125);
	violet=$(tput setaf 61);
	blue=$(tput setaf 33);
	cyan=$(tput setaf 37);
	green=$(tput setaf 64);
else
	bold='';
	reset="\e[0m";
	black="\e[1;30m";
	white="\e[1;37m";
	purple="\e[1;35m";
	base03="\e[1;30m";
	base02="\e[1;30m";
	base01="\e[1;30m";
	base00="\e[1;30m";
	base0="\e[1;37m";
	base1="\e[1;37m";
	base2="\e[1;37m";
	base3="\e[1;37m";
	yellow="\e[1;33m";
	orange="\e[1;33m";
	red="\e[1;31m";
	magenta="\e[1;31m";
	violet="\e[1;35m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${yellow}";
fi;

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
PS1+="\[${bold}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${base1}\] at ";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[${base1}\] in ";
PS1+="\[${green}\]\w"; # working directory full path
PS1+="\$(prompt_git \"\[${base1}\] on \[${violet}\]\" \"\[${blue}\]\")"; # Git repository details
PS1+="\n";
PS1+="\[${base1}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
